using System;
using System.IO;

namespace BWMTool
{
    class Program
    {
        static void Main(string[] args)
        {
            if (args.Length < 1)
            {
                Console.WriteLine("usage: {0} [input.bwm] (output.obj)", Environment.GetCommandLineArgs()[0]);
                return;
            }

            string inputFileName = args[0];
            string outputFileName = Path.GetFileNameWithoutExtension(inputFileName) + ".obj";

            if (args.Length > 1)
                outputFileName = args[1];

            BWMToOBJ(inputFileName, outputFileName);

            //foreach(string file in Directory.EnumerateFiles("C:\\Program Files (x86)\\Lionhead Studios\\Black & White 2\\Data\\Art", "*.bwm", SearchOption.AllDirectories))
            //{
            //    BWMToOBJ(file);
            //}
        }

        static void BWMToOBJ(string inputFileName, string outputFileName)
        {
            var bwm = new BWM(inputFileName);

            var outputMtlFileName = Path.GetFileNameWithoutExtension(outputFileName) + ".mtl";

            using (var outStream = File.OpenWrite(outputMtlFileName))
            using (var writer = new StreamWriter(outStream))
            {
                writer.WriteLine("# materials for {0}", outputFileName);
                writer.WriteLine("# generated by bwmtool\n# {0}\n", DateTime.Now.ToString());

                for (int i = 0; i < bwm.MaterialDefinitions.Length; i++)
                {
                    var matDef = bwm.MaterialDefinitions[i];

                    writer.WriteLine("# material {0}", i);
                    writer.WriteLine("newmtl {0}", i);
                    writer.WriteLine("Ka 1.000 1.000 1.000");
                    writer.WriteLine("Kd 1.000 1.000 1.000");
                    writer.WriteLine("Ks 0.000 0.000 0.000");
                    writer.WriteLine("d 1.0");
                    writer.WriteLine("illum 2");

                    if (!String.IsNullOrEmpty(matDef.DiffuseMap))
                        writer.WriteLine("map_Kd textures/{0}", matDef.DiffuseMap);

                    if (!String.IsNullOrEmpty(matDef.LightMap))
                        writer.WriteLine("map_Ka textures/{0}", matDef.LightMap);

                    if (!String.IsNullOrEmpty(matDef.SpecularMap))
                    {
                        writer.WriteLine("map_Ks textures/{0}", matDef.DiffuseMap);
                        writer.WriteLine("map_Ns textures/{0}", matDef.SpecularMap);
                    }

                    if (!String.IsNullOrEmpty(matDef.NormalMap))
                        writer.WriteLine("map_bump textures/{0}", matDef.NormalMap);
                }
            }

            using (var outStream = File.OpenWrite(outputFileName))
            using (var writer = new StreamWriter(outStream))
            {
                writer.WriteLine("# generated by bwmtool\n# {0}\n", DateTime.Now.ToString());

                writer.WriteLine("mtllib {0}\n", outputMtlFileName);

                writer.WriteLine("# vert positions");
                for (int i = 0; i < bwm.Verticies.Length; i++)
                    writer.WriteLine("v {0} {1} {2}", bwm.Verticies[i].Position.X, bwm.Verticies[i].Position.Y, bwm.Verticies[i].Position.Z);

                writer.WriteLine("\n# vert normals");
                for (int i = 0; i < bwm.Verticies.Length; i++)
                    writer.WriteLine("vn {0} {1} {2}", bwm.Verticies[i].Normal.X, bwm.Verticies[i].Normal.Y, bwm.Verticies[i].Normal.Z);

                writer.WriteLine("\n# vert tex coords");
                for (int i = 0; i < bwm.Verticies.Length; i++)
                    writer.WriteLine("vt {0} {1}", bwm.Verticies[i].U, -bwm.Verticies[i].V);

                writer.WriteLine("\n# meshes\n");

                for (int i = 0; i < bwm.MeshDescriptions.Length; i++)
                {
                    var meshDesc = bwm.MeshDescriptions[i];
                    writer.WriteLine("# {0}", meshDesc.Name);

                    writer.WriteLine("o {0}\n", meshDesc.Name);

                    for (int j = 0; j < meshDesc.MaterialRefs.Length; j++)
                    {
                        var matRef = meshDesc.MaterialRefs[j];

                        writer.WriteLine("usemtl {0}", matRef.MaterialDefinition);

                        for (uint face = matRef.FacesOffset; face < matRef.FacesSize; face++)
                        {
                            writer.WriteLine("f {0}/{0}/{0} {1}/{1}/{1} {2}/{2}/{2}",
                                bwm.Indices[meshDesc.IndiciesPointer + matRef.IndiciesOffset + face * 3 + 0] + 1,
                                bwm.Indices[meshDesc.IndiciesPointer + matRef.IndiciesOffset + face * 3 + 1] + 1,
                                bwm.Indices[meshDesc.IndiciesPointer + matRef.IndiciesOffset + face * 3 + 2] + 1
                            ); // indexes start at 1 REE

                        }
                    }
                }
            }
        }
    }
}
